import React, { useState, useRef, useEffect, ReactNode } from "react";

interface ModalContainerProps {
    children: ReactNode;
}

// Mouse gradient code generated by ChatGPT

const ModalContainer: React.FC<ModalContainerProps> = ({ children }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const containerRef = useRef<HTMLDivElement | null>(null);
    const overlayRef = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const container = containerRef.current;
        const overlay = overlayRef.current;

        if (container && overlay) {
            const handleMouseMove = (e: MouseEvent) => {
                const { width, height, left, top } = container.getBoundingClientRect();
                const x = e.clientX - left;
                const y = e.clientY - top;

                const xPercent = (x / width) * 100;
                const yPercent = (y / height) * 100;

                overlay.style.background = `radial-gradient(circle at ${xPercent}% ${yPercent}%, rgba(255, 255, 255, 0.25), transparent)`;
            };

            const handleMouseLeave = () => {
                overlay.style.background = ''; // Reset on mouse leave
            };

            container.addEventListener("mousemove", handleMouseMove);
            container.addEventListener("mouseleave", handleMouseLeave);

            // Cleanup function to remove event listeners
            return () => {
                container.removeEventListener("mousemove", handleMouseMove);
                container.removeEventListener("mouseleave", handleMouseLeave);
            };
        }
    }, []);

    return (
        <div
            ref={containerRef}
            className="relative flex modal-container bg-slate-700 rounded-3xl flex-1 m-4 p-6 min-h-40 border-4 border-slate-600 hover:bg-slate-800 duration-200 justify-center items-center"
        >
            {/* Overlay for Gradient Effect */}
            <div
                ref={overlayRef}
                className="absolute inset-0 bg-black rounded-3xl pointer-events-none transition-transform duration-300"
            ></div>

            {/* Optional Expansion Button (uncomment if needed) */}
            {/* <div className="absolute top-2 right-2">
                <button onClick={() => setIsExpanded(true)}>
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        fill="currentColor"
                        className="bi bi-arrows-angle-expand"
                        viewBox="0 0 16 16"
                    >
                        <path
                            fillRule="evenodd"
                            d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707"
                        />
                    </svg>
                </button>
            </div> */}

            {/* Content */}
            <div className="relative z-10">
                {children}
            </div>
        </div>
    );
};

export default ModalContainer;